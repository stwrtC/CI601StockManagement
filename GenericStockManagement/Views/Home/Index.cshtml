@using GenericStockManagement.ViewModels
@model HomeViewModel

@{
	ViewData["Title"] = "Home Page";
	var role = Context.Session.GetString("Role");
}

<div class="text-center">
	<h1 class="display-4">Welcome</h1>
    
    <div class="chart-container">
        <div class="chart-item">
            <h4>Product Count by Category</h4>
            <canvas id="productCountChart"></canvas>
        </div>

        <div class="chart-item">
            <h4>Total Value by Category (£)</h4>
            <canvas id="categoryValueChart"></canvas>
        </div>

        <div class="chart-item">
            <h4>Stock by Category</h4>
            <canvas id="categoryStockChart"></canvas>
        </div>
    </div>
	
</div>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<script>
    var categoryCounts = @Html.Raw(ViewBag.CategoryCounts);

    // Product Count Pie Chart
    var productCountChartCtx = document.getElementById('productCountChart').getContext('2d');
    var productCountChart = new Chart(productCountChartCtx, {
        type: 'pie',
        data: {
            labels: categoryCounts.map(item => item.CategoryName),
            datasets: [{
                label: 'Number of Products',
                data: categoryCounts.map(item => item.ProductCount),
                backgroundColor: categoryCounts.map(() => `rgba(${Math.floor(Math.random() * 256)}, ${Math.floor(Math.random() * 256)}, ${Math.floor(Math.random() * 256)}, 0.5)`),
                borderColor: categoryCounts.map(() => 'rgba(0, 0, 0, 0.1)'),
                borderWidth: 1
            }]
        }
    });

    // Category Value Pie Chart
    var categoryValueChartCtx = document.getElementById('categoryValueChart').getContext('2d');
    var categoryValueChart = new Chart(categoryValueChartCtx, {
        type: 'pie',
        data: {
            labels: categoryCounts.map(item => item.CategoryName),
            datasets: [{
                label: 'Total Category Value',
                data: categoryCounts.map(item => item.TotalValue),
                backgroundColor: categoryCounts.map(() => `rgba(${Math.floor(Math.random() * 256)}, ${Math.floor(Math.random() * 256)}, ${Math.floor(Math.random() * 256)}, 0.5)`),
                borderColor: categoryCounts.map(() => 'rgba(0, 0, 0, 0.1)'),
                borderWidth: 1
            }]
        }
    });

    // Category Stock Pie Chart
    var categoryStockChartCtx = document.getElementById('categoryStockChart').getContext('2d');
    var categoryStockChart = new Chart(categoryStockChartCtx, {
        type: 'pie',
        data: {
            labels: categoryCounts.map(item => item.CategoryName),
            datasets: [{
                label: 'Category Stock',
                data: categoryCounts.map(item => item.TotalStock),
                backgroundColor: categoryCounts.map(() => `rgba(${Math.floor(Math.random() * 256)}, ${Math.floor(Math.random() * 256)}, ${Math.floor(Math.random() * 256)}, 0.5)`),
                borderColor: categoryCounts.map(() => 'rgba(0, 0, 0, 0.1)'),
                borderWidth: 1
            }]
        }
    });
</script>



